#+TITLE: Emacs configuration
#+AUTHOR: Sam Cedarbaum
#+EMAIL: scedarbaum@gmail.com
#+DESCRIPTION: An org-babel based Emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+STARTUP: inlineimages

#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[file:photos/emacs-logo.png]]

This is my Emacs configuration! It is largely based around Evil mode.

* Compatibility

This config is written for Emacs 29+. It assumes that =eglot= (LSP integration) and Tree-sitter are available.

#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29.0")
      (display-warning 'config "Configuration is designed for Emacs 29+"))
#+END_SRC

* General configuration
** Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Sam Cedarbaum"
        user-mail-address "scedarbaum@gmail.com")
#+END_SRC

** GPG

Enable pin entry within the Emacs minibuffer.

#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+END_SRC

Use GPG for plstore encryption.

#+BEGIN_SRC emacs-lisp
  (require 'plstore)
  (add-to-list 'plstore-encrypt-to "232BDBED16AEC393")
#+END_SRC

** auth-sources

Look for JSON files when searching auth sources.

#+BEGIN_SRC emacs-lisp
  (require 'auth-source)
  (dolist (file '("~/.authinfo.json" "~/.authinfo.json.gpg"))
    ((lambda ()
       (when (file-exists-p file) (add-to-list 'auth-sources file)))))
#+END_SRC

** Startup window

Disable startup screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** GUI configuration

This section is for themes and GUI configuration. Below code will reload the configuration each time a new frame is created. This is useful when using Emacs server/client.

#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)
  (use-package snazzy-theme)
  ;; Wait for theme install before calling configure-frame
  (elpaca-wait)

  (defun configure-frame (&optional frame)
    "Customize the FRAME and load theme."
    (load-theme 'snazzy t)
    (set-face-attribute 'fringe nil :background nil)
    (custom-set-faces
    '(tooltip ((t :foreground "white"))))
    (unless frame
      (setq frame (selected-frame)))
    (when frame
      (with-selected-frame frame
        (when (display-graphic-p)
          (menu-bar-mode -1)
          (toggle-scroll-bar -1)
          (tool-bar-mode -1)))))

  ;; Configure frame and also ensure each new frame will be configured
  (configure-frame)
  (add-hook 'after-make-frame-functions #'configure-frame t)
#+END_SRC

Enable winner-mode.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

** Help system

Select the help window when opened.

#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC

** Sounds

Disable bell function.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** File management

Don't delete any backups.

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)
#+END_SRC

Unconditionally make numeric backups for files.

#+BEGIN_SRC emacs-lisp
  (setq version-control t)
#+END_SRC

Backup files even if they're under version control.

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

Place automatically saved files in a single directory.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "auto-save-list/") t)))
#+END_SRC

Place all backups in a single directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "backups"))))
#+END_SRC

Save the minibuffer history between sessions. Also save the kill-ring and search rings.

#+BEGIN_SRC emacs-lisp
  (require 'savehist)
  (savehist-mode 1)
  (setq history-length 10000)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring
          register-alist))
#+END_SRC

Don't create lock files.

#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

Enable auto revert mode.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

** Customize

Put all automatic configurations in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)
#+END_SRC

** Text encoding

Prefer [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]] Encoding.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Font

Try to use either Berkeley Mono, [[https://github.com/tonsky/FiraCode][Fira Code]], [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]], or [[https://sourcefoundry.org/hack/][Hack]] font.

#+BEGIN_SRC emacs-lisp
  (defun get-font (font-list)
    (seq-find (lambda (font)
                (member font (font-family-list)))
              font-list))

  (defun get-preferred-font (&optional size)
    (let ((font-name (get-font '("Berkeley Mono" "Fira Code" "JetBrains Mono" "Hack"))))
      (when font-name
        (if size
            (format "%s-%s" font-name size)
          font-name))))

  (when-let ((font (get-preferred-font 14)))
    (set-face-attribute 'default nil :font font))
#+END_SRC

** Spaces/tabs

Use spaces instead of tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+END_SRC

Cleanup whitespace on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Recent files

Enable recentf-mode and save lots of items.

#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-auto-cleanup 'never)
  (setq recentf-max-menu-items 1000)
  (setq recentf-max-saved-items 1000)
#+END_SRC

** World clock

Configure world clock display.

#+BEGIN_SRC emacs-lisp
  (setq display-time-world-time-format "%FT%T%z") ;; ISO 8601
  (setq display-time-world-timer-second 1)
  (setq display-time-world-list '(("UTC"     "UTC")
                                  ("EST5EDT" "New York")
                                  ("CST6CDT" "Chicago")
                                  ("PST8PDT" "Los Angeles")))
#+END_SRC

** Kill ring

Save existing clipboard text into kill ring before replacing it.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

** Native compilation

Don't display compilation warnings.

#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC

** ANSI Color support

Enable ANSI color support. See:
- https://www.emacswiki.org/emacs/AnsiColor
- https://emacs.stackexchange.com/a/8137

  #+BEGIN_SRC emacs-lisp
    (require 'ansi-color)

    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)

    (defun my/ansi-colorize-buffer ()
      (let ((buffer-read-only nil))
        (ansi-color-apply-on-region (point-min) (point-max))))
    (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
  #+END_SRC

* OS specific settings
** macOS

Bind the command key to meta.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta))
#+END_SRC

* Modes and packages
** Ubiquitous modes
*** General

Use [[https://github.com/noctuid/general.el][General]] for keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package general :demand t)
  ;; Wait for :general macro to be available for other packages
  (elpaca-wait)
#+END_SRC

*** Hydra

Install [[https://github.com/abo-abo/hydra][Hydra]].

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :general
    ("<f2>" 'hydra-zoom/body)
    :config
    (defhydra hydra-zoom ()
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")
      ("r" (text-scale-set 0)  "reset")))
#+END_SRC

Add =:hydra= keyword to =use-package=.

#+BEGIN_SRC emacs-lisp
  (use-package use-package-hydra)
  ;; Wait for :hydra macro to be available to other packages
  (elpaca-wait)
#+END_SRC

*** Evil mode

Vim emulation for Emacs ([[https://github.com/emacs-evil/evil][GitHub]]).

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode))

  ;; Use undo-tree for Evil mode's undo functionality
  (use-package undo-tree
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode 1))
#+END_SRC

Vim-style key-bindings for Org mode ([[https://github.com/Somelauw/evil-org-mode/blob/master/README.org][GitHub]]).

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

Vim-style key-bindings for many common Emacs modes ([[https://github.com/emacs-evil/evil-collection][GitHub]]).

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection :config (evil-collection-init))
#+END_SRC

Evil surround support similar to [[https://github.com/tpope/vim-surround][surround.vim]].

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround :config (global-evil-surround-mode 1))
#+END_SRC

Evil comment support similar to [[https://github.com/tpope/vim-commentary][commentary.vim]].

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary :config (evil-commentary-mode))
#+END_SRC

Add visual hints when editing with evil.

#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))
#+END_SRC

Preview registers and marks before using them.

#+BEGIN_SRC emacs-lisp
  (use-package evil-owl
    :config
    (if window-system
        (setq evil-owl-display-method 'posframe
              evil-owl-extra-posframe-args '(:width 50 :height 20)
              evil-owl-max-string-length 50)
      (progn
        (setq evil-owl-max-string-length 500)
        (add-to-list 'display-buffer-alist
                     '("*evil-owl*"
                       (display-buffer-in-side-window)
                       (side . bottom)
                       (window-height . 0.3)))))
    (evil-owl-mode))
#+END_SRC

Better searching.

#+BEGIN_SRC emacs-lisp
  (use-package evil-anzu
    :config
    (global-anzu-mode +1))
#+END_SRC

*** Vertico / Orderless / Consult / Marginalia / Embark

Vertical completion UI.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :elpaca (vertico :files (:defaults "extensions/*")
                     :includes (vertico-buffer
                                vertico-directory
                                vertico-flat
                                vertico-indexed
                                vertico-mouse
                                vertico-quick
                                vertico-repeat
                                vertico-reverse))
    :init
    (vertico-mode)
    (setq vertico-count 20)
    (setq vertico-resize t)
    (setq vertico-cycle t))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :elpaca nil
    :general
    (:keymaps 'vertico-map "C-l" 'vertico-directory-up)
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC

More flexible completion engine: https://github.com/oantolin/orderless.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

Completing reads for common commands.

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :general
    ;; C-c bindings (mode-specific-map)
    ("C-c h" 'consult-history)
    ("C-c m" 'consult-mode-command)
    ("C-c k" 'consult-kmacro)
    ;; C-x bindings (ctl-x-map)
    ("C-x M-:" 'consult-complex-command)
    ("C-x b"   'consult-buffer)
    ("C-x 4 b" 'consult-buffer-other-window)
    ("C-x 5 b" 'consult-buffer-other-frame)
    ("C-x r b" 'consult-bookmark)
    ("C-x p b" 'consult-project-buffer)
    ;; Custom M-# bindings for fast register access
    ("M-#"   'consult-register-load)
    ("M-'"   'consult-register-store)
    ("C-M-#" 'consult-register)
    ;; Other custom bindings
    ("M-y"      'consult-yank-pop)
    ;; M-g bindings (goto-map)
    ("M-g e"   'consult-compile-error)
    ("M-g f"   'consult-flymake)
    ("M-g g"   'consult-goto-line)
    ("M-g M-g" 'consult-goto-line)
    ("M-g o"   'consult-outline)
    ("M-g m"   'consult-mark)
    ("M-g k"   'consult-global-mark)
    ("M-g i"   'consult-imenu)
    ("M-g I"   'consult-imenu-multi)
    ;; M-s bindings (search-map)
    ("M-s d"   'consult-find)
    ("M-s D"   'consult-locate)
    ("M-s g"   'consult-grep)
    ("M-s G g" 'consult-git-grep)
    ("M-s r"   'consult-ripgrep)
    ("M-s l"   'consult-line)
    ("M-s L"   'consult-line-multi)
    ("M-s m"   'consult-multi-occur)
    ("M-s k"   'consult-keep-lines)
    ("M-s u"   'consult-focus-lines)
    ;; Isearch integration
    (:keymaps 'isearch-mode-map
              "M-s e" 'consult-isearch-history
              "M-e"   'consult-isearch-history
              "M-s e" 'consult-isearch-history
              "M-s l" 'consult-line
              "M-s L" 'consult-line-multi)
    ;; Minibuffer history
    (:keymaps 'minibuffer-local-map
              "M-s" 'consult-history
              "M-r" 'consult-history)
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; This improves the register preview for `consult-register',
    ;; `consult-register-load',`consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key "M-.")

    (setq consult-narrow-key "<"))

  (use-package consult-ls-git
    :general
    ("M-s G f"  #'consult-ls-git)
    ("M-s G F"  #'consult-ls-git-other-window))
#+END_SRC

Add marginalia to minibuffer completions.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+END_SRC

Action dispatch from minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :general
    ("C-."   'embark-act)
    ("C-;"   'embark-dwim)
    ("C-h B" 'embark-bindings)
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

Add icons to minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC

*** corfu

Text completion framework.

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :demand
    :custom
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)  ;; Enable auto completion
    :init
    (global-corfu-mode))
#+END_SRC

*** Flycheck

Syntax checker.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode t))
#+END_SRC

Use flycheck for Eglot.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+END_SRC

*** rainbow-delimiters

Make corresponding delimiters the same color (e.g., {, (, ")

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** rainbow-mode

Set background color to strings that match color.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode))
#+END_SRC

*** doom-modeline

doom-modeline mode line.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-modal-modern-icon nil))
#+END_SRC

*** Minions

Minimal mode line.

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC

*** eyebrowse

Window manager.

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :demand t
    :general
    (:keymaps 'eyebrowse-mode-map "C-w 1" 'eyebrowse-switch-to-window-config-1)
    (:keymaps 'eyebrowse-mode-map "C-w 2" 'eyebrowse-switch-to-window-config-2)
    (:keymaps 'eyebrowse-mode-map "C-w 3" 'eyebrowse-switch-to-window-config-3)
    (:keymaps 'eyebrowse-mode-map "C-w 4" 'eyebrowse-switch-to-window-config-4)
    :config
    (eyebrowse-mode t)
    ;; Conflicts with evil-commentary.
    ;; (eyebrowse-setup-evil-keys)
    (setq eyebrowse-new-workspace t))
#+END_SRC

*** Dashboard

Dashboard shown on startup.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-items '((recents   . 5)
                            (bookmarks . 5)
                            (projects  . 5)
                            (agenda    . 5)
                            (registers . 5)))
    (setq dashboard-startup-banner 'logo)
    (dashboard-setup-startup-hook))
#+END_SRC

*** goto-line-preview

Preview line before jumping to it.

#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :general
    ("M-g g" 'goto-line-preview))
#+END_SRC

*** alert

Alert system.

#+BEGIN_SRC emacs-lisp
  (use-package alert
    :config
    (when (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier)))
#+END_SRC

*** Treemacs

Treemacs - a tree layout file explorer for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (treemacs-git-mode 'simple)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    :general
    ("C-c t" 'treemacs))

  (use-package treemacs-evil)

  (use-package treemacs-projectile)

  (use-package treemacs-icons-dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit)

  (use-package treemacs-all-the-icons)
#+END_SRC

*** Smex

Enhanced M-x command. Allows =counsel-M-x= to list commands by recently used.

#+BEGIN_SRC emacs-lisp
  (use-package smex)
#+END_SRC

*** ElDoc box

Displays ElDoc documentations in a childframe.

#+BEGIN_SRC emacs-lisp
  (use-package eldoc-box
    :hook ((eldoc-mode . eldoc-box-hover-mode)))
#+END_SRC

** Coding and Dev Ops
*** Git

Git integration.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general ("C-x g" 'magit-status)
    :config
    (add-hook 'magit-diff-visit-file-hook  (lambda ()
                                             (when smerge-mode
                                               (unpackaged/smerge-hydra/body)))))

  ;; (use-package magit-libgit) ; Not being actively used yet.
#+END_SRC

Open files in remote Git portals.

#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :config
    (setq git-link-open-in-browser t))
#+END_SRC

Travel through Git history.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

Major modes for Git configuration files.

#+BEGIN_SRC emacs-lisp
  (use-package git-modes)
#+END_SRC

Resolve merge conflicts. From: https://github.com/alphapapa/unpackaged.el#smerge-mode.

#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (require 'smerge-mode)
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
#+END_SRC

*** Projectile

Project (e.g., Git) management and navigation.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :general
    ("C-c p" '(:keymap projectile-command-map))
    :config
    (projectile-mode))
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet :config (yas-global-mode 1))
#+END_SRC

*** libvterm

Emacs libvterm integration.

#+BEGIN_SRC emacs-lisp
  (use-package vterm)
  (use-package multi-vterm)
#+END_SRC

*** Docker

Interface to Docker.

#+BEGIN_SRC emacs-lisp
  (use-package docker :general ("C-c o"  'docker))
#+END_SRC

Use Dockerfile tree-sitter mode.

#+BEGIN_SRC emacs-lisp
  (require 'dockerfile-ts-mode)
#+END_SRC

*** Kubernetes

Interface to Kubernetes.

#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))
#+END_SRC

*** EditorConfig

[[https://editorconfig.org/][EditorConfig]] plugin.

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+END_SRC

*** origami

A text folding minor mode for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package origami)
#+END_SRC

*** Copilot.el

Unofficial integration with GitHub Copilot.

#+BEGIN_SRC emacs-lisp
  ;; Force latest jsonrpc version to be used in case built-in is out-of-date
  (use-package jsonrpc)
  (use-package copilot
    :elpaca (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :config
    (add-hook 'prog-mode-hook 'copilot-mode)
    :general
    ("C-<tab>" 'copilot-accept-completion))
#+END_SRC

*** codespaces.el

Provides support for connecting to GitHub Codespaces in Emacs via TRAMP.

#+BEGIN_SRC emacs-lisp
  (use-package codespaces
    :ensure-system-package gh
    :config (codespaces-setup)
    :bind ("C-c S" . #'codespaces-connect))
#+END_SRC

*** eglot

Built-in LSP integration.

#+BEGIN_SRC emacs-lisp
  (setq eglot-confirm-server-initiated-edits nil)
#+END_SRC

*** tree-sitter

Intelligently use tree-sitter major modes when possible.

#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :demand t
    :config
    (add-to-list 'treesit-auto-fallback-alist '(bash-ts-mode . sh-mode))
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+END_SRC

*** dotenv-mode

Major mode for editing .env files.

#+BEGIN_SRC emacs-lisp
  (use-package dotenv-mode
    :mode ("\\.env\\..*\\'" . dotenv-mode))
#+END_SRC

*** format-all

Formatting for many languages.

#+BEGIN_SRC emacs-lisp
  (use-package format-all)
#+END_SRC

** File and language specific modes
*** Org mode extensions

Use UTF-8 bullet points in org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

HTML export.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

Enable better mouse support for org mode.

#+BEGIN_SRC emacs-lisp
  (require 'org-mouse)
#+END_SRC

Flash cards in org mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-drill :commands org-drill)
#+END_SRC

Edit and export Anki notes.

#+BEGIN_SRC emacs-lisp
  (use-package anki-editor)
#+END_SRC

Allow org babel to execute without confirmation.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Markdown

A major mode for Markdown (.md) files.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

*** JavaScript / TypeScript

Load TypeScript mode with tree-sitter support.

#+BEGIN_SRC emacs-lisp
  (require 'typescript-ts-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun deno-project-p ()
    "Determine if the current project is a Deno project."
    (or
     (locate-dominating-file default-directory "deno.json")
     (locate-dominating-file default-directory "import_map.json")))

  (defun node-project-p ()
    "Determine if the current project is a Node project."
    (locate-dominating-file default-directory "package.json"))

  ;; Based on https://github.com/guilhermecomum/emacs.d/blob/main/readme.org#eglot
  (defun ecma-server-program (_)
    "Decide which server to use for ECMA Script based on project characteristics."
    (cond ((node-project-p) '("typescript-language-server" "--stdio"))
          ((deno-project-p) '("deno" "lsp" :initializationOptions (:enable t :lint t)))
          (t                nil)))

  (with-eval-after-load 'eglot
    ;; See: https://github.com/joaotavora/eglot/issues/525
    (put 'typescript-ts-mode 'eglot-language-id "typescript")
    (put 'js-ts-mode 'eglot-language-id "javascript")
    (add-to-list 'eglot-server-programs
                 '((js-mode js-ts-mode tsx-ts-mode typescript-ts-mode typescript-mode) . ecma-server-program)))
#+END_SRC

Run Jest unit tests.

#+BEGIN_SRC emacs-lisp
  (use-package jest)
#+END_SRC

Manage node versions through nvm

#+BEGIN_SRC emacs-lisp
  (use-package nvm
    :elpaca (:host github :repo "rejeep/nvm.el")
    :config
    (nvm-use "18"))
#+END_SRC

*** LaTeX

Utility for writing and exporting TeX files.

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    ;; :elpaca nil
    :elpaca  (auctex :pre-build (("./autogen.sh")
                                 ("./configure"
                                  "--without-texmf-dir"
                                  "--with-packagelispdir=./"
                                  "--with-packagedatadir=./")
                                 ("make"))
                     :build (:not elpaca--compile-info) ;; Make will take care of this step
                     :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
                     :version (lambda (_) (require 'tex-site) AUCTeX-version))
    :config
    (setq TeX-parse-self t) ; Enable parse on load.
    (setq TeX-auto-save t)) ; Enable parse on save.
#+END_SRC

*** JSON

Mode for editing JSON files.

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

*** Lua

Mode for editing Lua files.

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
#+END_SRC

*** Python

Always use Python 3.

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC

*** Haskell

Haskell major mode.

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

*** PDF Tools

Display and edit PDFs.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode  ("\\.pdf\\'" . pdf-view-mode)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (pdf-tools-install :no-query)
    (require 'pdf-occur))
#+END_SRC

*** YAML

YAML mode.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode))
#+END_SRC

*** GraphQL

GraphQL files.

#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode)
#+END_SRC

*** Go

Go major mode.

#+BEGIN_SRC emacs-lisp
  (require 'go-ts-mode)
#+END_SRC

*** Rust

Rust major mode.

#+BEGIN_SRC emacs-lisp
  (require 'rust-ts-mode)
#+END_SRC

Transient interface for Cargo.

#+BEGIN_SRC emacs-lisp
  (use-package cargo-transient)
#+END_SRC

*** Protocol Buffers

Protocol Buffers support.

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode)
#+END_SRC

*** Vimscript

Vimrc mode.

#+BEGIN_SRC emacs-lisp
  (use-package vimrc-mode
    :mode ("\\.vim\\(rc\\)?\\'"))
#+END_SRC

*** Swift

Swift mode.

#+BEGIN_SRC emacs-lisp
  (use-package swift-mode
    :config
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(swift-mode . ("xcrun" "sourcekit-lsp"))))
    )
#+END_SRC

*** Bash / Shell

Bash / Shell highlighting.

#+BEGIN_SRC emacs-lisp
  (require 'sh-script)
  ;; Load for .zsh, .zshrc, zshrc
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . bash-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.zshrc\\'" . bash-ts-mode))
  (add-to-list 'auto-mode-alist '("/zshrc\\'" . bash-ts-mode))
#+END_SRC

** Utilities
*** ESUP - Emacs Start Up Profiler

Emacs startup profiler.

#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC

*** persistent-scratch

Save and backup the \*scratch\* buffer.

#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :config
    (setq persistent-scratch-backup-directory (concat user-emacs-directory "scratch"))
    (persistent-scratch-autosave-mode))
#+END_SRC

*** scratch

Create new scratch buffers with same major mode as current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package scratch)
#+END_SRC

*** exec-path-from-shell

Inherit environment variables from SHELL.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

*** which-key

Display possible keybindings after an incomplete prefix.

#+BEGIN_SRC emacs-lisp
  (use-package which-key :config (which-key-mode))
#+END_SRC

*** Lorem Ipsum

Insert filler (lorem ipsum) text.

#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum)
#+END_SRC

*** restclient

Major mode for debugging REST API calls.

#+BEGIN_SRC emacs-lisp
  (use-package restclient :mode (("\\.http\\'" . restclient-mode)))
#+END_SRC

*** wgrep

wgrep allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively.

#+BEGIN_SRC emacs-lisp
  (use-package wgrep)
#+END_SRC

*** gptel

A simple, no-frills ChatGPT client for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :config
    (let* ((open-ai-auth (car (auth-source-search :host "OpenAI"))))
      (setq gptel-api-key (plist-get open-ai-auth :api_key))))
#+END_SRC

** External services

Common OAuth requirements.

#+BEGIN_SRC emacs-lisp
  (use-package oauth2)
  (use-package deferred)
  (use-package request-deferred)
  (use-package elnode)
  (use-package oauth2-auto
    :elpaca (:host github :repo "telotortium/emacs-oauth2-auto"))
  (elpaca-wait)
#+END_SRC

Control Spotify via connect API.

#+BEGIN_SRC emacs-lisp
  (use-package smudge
    :if (auth-source-search :host "spotify" :user "scedarbaum")
    :hydra (hydra-spotify (:hint nil)
                          "
  ^Search^                  ^Control^               ^Manage^
  ^^^^^^^^-----------------------------------------------------------------
  _t_: Track               _SPC_: Play/Pause        _+_: Volume up
  _m_: My Playlists        _n_  : Next Track        _-_: Volume down
  _f_: Featured Playlists  _p_  : Previous Track    _x_: Mute
  _u_: User Playlists      _r_  : Repeat            _d_: Device
  ^^                       _s_  : Shuffle           _q_: Quit
  "
                          ("t" smudge-track-search :exit t)
                          ("m" smudge-my-playlists :exit t)
                          ("f" smudge-featured-playlists :exit t)
                          ("u" smudge-user-playlists :exit t)
                          ("SPC" smudge-controller-toggle-play :exit nil)
                          ("n" smudge-controller-next-track :exit nil)
                          ("p" smudge-controller-previous-track :exit nil)
                          ("r" smudge-controller-toggle-repeat :exit nil)
                          ("s" smudge-controller-toggle-shuffle :exit nil)
                          ("+" smudge-controller-volume-up :exit nil)
                          ("-" smudge-controller-volume-down :exit nil)
                          ("x" smudge-controller-volume-mute-unmute :exit nil)
                          ("d" smudge-select-device :exit nil)
                          ("q" quit-window "quit" :color blue))
    :config
    (setq spotify-creds (nth 0 (auth-source-search :host "spotify" :user "scedarbaum"))
          smudge-oauth2-client-id (plist-get spotify-creds :client_id)
          smudge-oauth2-client-secret (plist-get spotify-creds :client_secret)
          smudge-transport 'connect)
    :general
    ("C-c s" 'hydra-spotify/body))
#+END_SRC

GCal integration with org agenda.

#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :if (auth-source-search :host "org-gcal" :user "scedarbaum")
    :init
    (defconst org-gcal-file "~/Dropbox/Documents/Org/google/calendar.org")
    (when (file-exists-p org-gcal-file)
      (add-to-list 'org-agenda-files org-gcal-file))
    (setq org-gcal-creds (nth 0 (auth-source-search :host "org-gcal" :user "scedarbaum"))
          org-gcal-client-id (plist-get org-gcal-creds :client_id)
          org-gcal-client-secret(plist-get org-gcal-creds :client_secret)
          org-gcal-fetch-file-alist `(("scedarbaum@gmail.com" . ,org-gcal-file)))
    :hook
    (org-agenda-mode . org-gcal-sync)
    (org-capture-after-finalize . org-gcal-sync))
#+END_SRC

GTasks integration with org files.

#+BEGIN_SRC emacs-lisp
  (use-package org-gtasks
    :elpaca (:host sourcehut :repo "jmasson/org-gtasks")
    :if (auth-source-search :host "org-gtasks" :user "scedarbaum")
    :config
    (defconst org-gtasks-directory "~/Dropbox/Documents/Org/google/")
    (defconst org-gtasks-file "~/Dropbox/Documents/Org/google/Tasks.org")
    (when (file-exists-p org-gtasks-file)
      (add-to-list 'org-agenda-files org-gtasks-file))
    (setq org-gtasks-creds (nth 0 (auth-source-search :host "org-gtasks" :user "scedarbaum")))
    (org-gtasks-register-account :name "scedarbaum@gmail.com"
                                 :directory org-gtasks-directory
                                 :client-id (plist-get org-gtasks-creds :client_id)
                                 :client-secret (plist-get org-gtasks-creds :client_secret)))
#+END_SRC

** Fun
*** emacs-fireplace

Fireplace in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package fireplace)
#+END_SRC

*** wttrin.el

Display the weather.

#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :config
    ;; Patch for https://github.com/bcbcarl/emacs-wttrin/issues/16
    (defun wttrin-fetch-raw-string (query)
      "Get the weather information based on your QUERY."
      (let ((url-user-agent "curl"))
        (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
        (with-current-buffer
            (url-retrieve-synchronously
             (concat "http://wttr.in/" query)
             (lambda (status) (switch-to-buffer (current-buffer))))
          (decode-coding-string (buffer-string) 'utf-8))))
    (setq wttrin-default-cities '("New York, NY" "Chicago, IL")))
#+END_SRC

*** XKCD

View XKCD comics.

#+BEGIN_SRC emacs-lisp
  (use-package xkcd
    :general
    (:states '(normal visual) :keymaps 'xkcd-mode-map "j" #'xkcd-next)
    (:states '(normal visual) :keymaps 'xkcd-mode-map "k" #'xkcd-prev))
#+END_SRC

*** Emoji

Display emoji.

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :hook
    (dashboard-mode  . emojify-mode)
    (org-mode        . emojify-mode)
    (org-agenda-mode . emojify-mode))
#+END_SRC

* Adhoc Elisp functions

Helper function to reload init file.

#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    "Reload init.el."
    (interactive)
    (load-file (expand-file-name (concat user-emacs-directory "init.el"))))
#+END_SRC

Open a file in OS file explorer ([[https://emacs.stackexchange.com/questions/7742/what-is-the-easiest-way-to-open-the-folder-containing-the-current-file-by-the-de][source]]).

#+BEGIN_SRC emacs-lisp
  (defun browse-file-directory ()
    "Open the current file's directory however the OS would."
    (interactive)
    (if default-directory
        (browse-url-of-file (expand-file-name default-directory))
      (error "No `default-directory' to open")))
#+END_SRC

Load ad hoc script files. These are system specific and not checked in. The =load-directory= snippet is from the [[https://www.emacswiki.org/emacs/LoadingLispFiles][EmacsWiki]].

#+BEGIN_SRC emacs-lisp
  (defun load-directory (dir)
    "Load all elisp files within DIR."
    (let ((load-it (lambda (f)
                     (load-file (concat (file-name-as-directory dir) f)))
                   ))
      (mapc load-it (directory-files dir nil "\\.el$"))))

  (let ((site-lisp (concat user-emacs-directory "site-lisp")))
    (when (file-directory-p site-lisp)
      (load-directory site-lisp)
      (add-to-list 'load-path site-lisp)))
#+END_SRC
