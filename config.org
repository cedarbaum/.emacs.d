#+TITLE: Emacs configuration
#+AUTHOR: Sam Cedarbaum
#+EMAIL: scedarbaum@gmail.com
#+DESCRIPTION: An org-babel based Emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+STARTUP: inlineimages

#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[file:photos/emacs-logo.png]]

This is my Emacs configuration! It is largely based around Evil mode.

* Package management

  Initialize package manager.

  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("org"          . "https://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    (setq package-enable-at-startup nil)
    (package-initialize)
  #+END_SRC

  Bootstrap use-package.

  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC

  Always ensure packages are installed.

  #+BEGIN_SRC emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  #+END_SRC

  Install packages directly from source (e.g., from GitHub repositories).

  #+BEGIN_SRC emacs-lisp
    (use-package quelpa)
    (use-package quelpa-use-package)
  #+END_SRC

* General configuration
** Personal information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Sam Cedarbaum"
           user-mail-address "scedarbaum@gmail.com")
   #+END_SRC

** GPG

   Enable pin entry within the Emacs minibuffer.

   #+BEGIN_SRC emacs-lisp
     (setq epa-pinentry-mode 'loopback)
   #+END_SRC

** auth-sources

   Look for JSON files when searching auth sources.

   #+BEGIN_SRC emacs-lisp
     (dolist (file '("~/.authinfo.json" "~/.authinfo.json.gpg"))
       ((lambda ()
          (when (file-exists-p file) (add-to-list 'auth-sources file)))))
   #+END_SRC

** Startup window

   Disable startup screen.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** GUI configuration

   This section is for themes and GUI configuration. Below code will reload the configuration each time a new frame is created. This is useful when using Emacs server/client.

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     (use-package kaolin-themes)

     (defun load-light-theme()
       (interactive)
       (load-theme 'kaolin-breeze t)
       (kaolin-treemacs-theme))

     (defun load-dark-theme()
       (interactive)
       (load-theme 'kaolin-ocean t)
       (kaolin-treemacs-theme))

     (defun configure-frame (&optional frame)
       "Customize the FRAME and load theme."
       (load-dark-theme)
       (unless frame
         (setq frame (selected-frame)))
       (when frame
         (with-selected-frame frame
           (when (display-graphic-p)
             (menu-bar-mode -1)
             (toggle-scroll-bar -1)
             (tool-bar-mode -1)))))

     ;; Configure frame and also ensure each new frame will be configured
     (configure-frame)
     (add-hook 'after-make-frame-functions #'configure-frame t)
   #+END_SRC

   Enable winner-mode.

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'winner-mode)
       (winner-mode 1))
   #+END_SRC

** Help system

   Select the help window when opened.

   #+BEGIN_SRC emacs-lisp
     (setq help-window-select t)
   #+END_SRC

** Line numbers

   Enable line numbers in text and prog modes.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'display-line-numbers-mode)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC

** Sounds

   Disable bell function.

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** File management

   Don't delete any backups.

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions -1)
   #+END_SRC

   Unconditionally make numeric backups for files.

   #+BEGIN_SRC emacs-lisp
     (setq version-control t)
   #+END_SRC

   Backup files even if they're under version control.

   #+BEGIN_SRC emacs-lisp
     (setq vc-make-backup-files t)
   #+END_SRC

   Place automatically saved files in a single directory.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms
       `((".*" ,(concat user-emacs-directory "auto-save-list/") t)))
   #+END_SRC

   Place all backups in a single directory.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
       `((".*" . ,(concat user-emacs-directory "backups"))))
   #+END_SRC

   Save the minibuffer history between sessions. Also save the kill-ring and search rings.

   #+BEGIN_SRC emacs-lisp
     (require 'savehist)
     (savehist-mode 1)
     (setq history-length 10000)
     (setq savehist-save-minibuffer-history 1)
     (setq savehist-additional-variables
           '(kill-ring
             search-ring
             regexp-search-ring
             register-alist))
   #+END_SRC

   Don't create lock files.

   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC

** Customize

   Put all automatic configurations in a separate file.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))
     (load custom-file 'noerror)
   #+END_SRC

** Text encoding

   Prefer [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]] Encoding.

   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

** Font

   Try to use either [[https://github.com/tonsky/FiraCode][Fira Code]], [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]], or [[https://sourcefoundry.org/hack/][Hack]] font.

   #+BEGIN_SRC emacs-lisp
     (cond ((member "Fira Code" (font-family-list)) (set-face-attribute 'default nil :font "Fira Code-12"))
           ((member "JetBrains Mono" (font-family-list)) (set-face-attribute 'default nil :font "JetBrains Mono-12"))
           ((member "Hack" (font-family-list)) (set-face-attribute 'default nil :font "Hack-12")))
   #+END_SRC

** Spaces/tabs

   Use spaces instead of tabs.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
   #+END_SRC

   Cleanup whitespace on save.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Recent files

   Enable recentf-mode and save lots of items.

   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-items 50)
     (setq recentf-max-saved-items 1000)
   #+END_SRC

** World clock

   Configure world clock display.

   #+BEGIN_SRC emacs-lisp
     (setq display-time-world-time-format "%FT%T%z") ;; ISO 8601
     (setq display-time-world-timer-second 1)
     (setq display-time-world-list '(("UTC"     "UTC")
                                     ("PST8PDT" "Seattle")
                                     ("CST6CDT" "Chicago")
                                     ("EST5EDT" "New York")))
   #+END_SRC

** Kill ring

   Save existing clipboard text into kill ring before replacing it.

   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC

* OS specific settings
** macOS

   Bind the command key to meta.

   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
         (setq mac-command-modifier 'meta))
   #+END_SRC

* Modes and packages
** Ubiquitous modes
*** General

    Use [[https://github.com/noctuid/general.el][General]] for keybindings.

    #+BEGIN_SRC emacs-lisp
      (use-package general)
    #+END_SRC

*** Hydra

    Install [[https://github.com/abo-abo/hydra][Hydra]].

    #+BEGIN_SRC emacs-lisp
      (use-package hydra
        :demand t
        :general
        ("<f2>" 'hydra-zoom/body)
        :config
        (defhydra hydra-zoom ()
          "zoom"
          ("g" text-scale-increase "in")
          ("l" text-scale-decrease "out")
          ("r" (text-scale-set 0)  "reset")))
    #+END_SRC

    Add =:hydra= keyword to =use-package=.

    #+BEGIN_SRC emacs-lisp
      (use-package use-package-hydra)
    #+END_SRC

*** Evil mode

    Vim emulation for Emacs ([[https://github.com/emacs-evil/evil][GitHub]]).

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        (setq evil-ex-complete-emacs-commands nil)
        (setq evil-vsplit-window-right t)
        (setq evil-split-window-below t)
        (setq evil-want-C-u-scroll t)
        (setq evil-want-keybinding nil)
        :config
        (evil-mode))
    #+END_SRC

    Vim-style key-bindings for Org mode ([[https://github.com/Somelauw/evil-org-mode/blob/master/README.org][GitHub]]).

    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :after (org evil)
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                  (lambda ()
                    (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+END_SRC

    Vim-style key-bindings for many common Emacs modes ([[https://github.com/emacs-evil/evil-collection][GitHub]]).

    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
    #+END_SRC

    Evil surround support similar to [[https://github.com/tpope/vim-surround][surround.vim]].

    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :after evil
        :config
        (global-evil-surround-mode 1))
    #+END_SRC

    Evil comment support similar to [[https://github.com/tpope/vim-commentary][commentary.vim]].

    #+BEGIN_SRC emacs-lisp
      (use-package evil-commentary
        :after evil
        :config
        (evil-commentary-mode))
    #+END_SRC

*** Ivy / Counsel / Swiper

    Incremental search/narrowing framework.

    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :demand
        :general
        ("C-c S-r" 'ivy-resume)
        ("C-x b"   'ivy-switch-buffer)
        :config
        (ivy-mode)
        (setq ivy-on-del-error-function #'ignore)
        (setq ivy-use-virtual-buffers t))

      (use-package counsel
        :after ivy
        :if window-system
        :general
        ("M-x"     'counsel-M-x)
        ("M-y"     'counsel-yank-pop)
        ("C-x C-f" 'counsel-find-file)
        ("C-x d"   'counsel-dired)
        ("C-c g"   'counsel-git)
        ("C-c j"   'counsel-git-grep)
        ("C-c r"   'counsel-rg)
        ("C-h a"   'counsel-apropos)
        (:keymaps 'counsel-find-file-map "C-l" #'counsel-up-directory)
        (:keymaps 'counsel-find-file-map "TAB" #'ivy-alt-done)
        :config
        ;; Don't prefix M-x search with '^'.
        (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
        ;; Don't exit when backspace is pressed too many times.
        (setq enable-recursive-minibuffers t))
    #+END_SRC

    Transient popup for searching with Ag.

    #+BEGIN_SRC emacs-lisp
      (use-package counsel-ag-popup
        :general
        ("C-c a" 'counsel-ag-popup))
    #+END_SRC

    Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :after ivy
        :general
        ("C-s" 'swiper))
    #+END_SRC

    Add icons to Ivy.

    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-ivy
        :after ivy
        :config
        (all-the-icons-ivy-setup))
    #+END_SRC

*** Git

    Git integration.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :general ("C-x g" 'magit-status)
        :config
        (add-hook 'magit-diff-visit-file-hook  (lambda ()
                                                 (when smerge-mode
                                                   (unpackaged/smerge-hydra/body)))))

      ;; (use-package magit-libgit) ; Not being actively used yet.
    #+END_SRC

    Open files in remote Git portals.

    #+BEGIN_SRC emacs-lisp
      (use-package git-link
        :defer t
        :config
        (setq git-link-open-in-browser t))
    #+END_SRC

    Travel through Git history.

    #+BEGIN_SRC emacs-lisp
      (use-package git-timemachine :defer t)
    #+END_SRC

    Major modes for Git configuration files.

    #+BEGIN_SRC emacs-lisp
      (use-package gitconfig-mode :defer t)
      (use-package gitattributes-mode :defer t)
      (use-package gitignore-mode :defer t)
    #+END_SRC

    Resolve merge conflicts. From: https://github.com/alphapapa/unpackaged.el#smerge-mode.

    #+BEGIN_SRC emacs-lisp
      (require 'hydra)
      (require 'smerge-mode)
      (defhydra unpackaged/smerge-hydra
        (:color pink :hint nil :post (smerge-auto-leave))
        "
      ^Move^       ^Keep^               ^Diff^                 ^Other^
      ^^-----------^^-------------------^^---------------------^^-------
      _n_ext       _b_ase               _<_: upper/base        _C_ombine
      _p_rev       _u_pper              _=_: upper/lower       _r_esolve
      ^^           _l_ower              _>_: base/lower        _k_ill current
      ^^           _a_ll                _R_efine
      ^^           _RET_: current       _E_diff
      "
        ("n" smerge-next)
        ("p" smerge-prev)
        ("b" smerge-keep-base)
        ("u" smerge-keep-upper)
        ("l" smerge-keep-lower)
        ("a" smerge-keep-all)
        ("RET" smerge-keep-current)
        ("\C-m" smerge-keep-current)
        ("<" smerge-diff-base-upper)
        ("=" smerge-diff-upper-lower)
        (">" smerge-diff-base-lower)
        ("R" smerge-refine)
        ("E" smerge-ediff)
        ("C" smerge-combine-with-next)
        ("r" smerge-resolve)
        ("k" smerge-kill-current)
        ("ZZ" (lambda ()
                (interactive)
                (save-buffer)
                (bury-buffer))
         "Save and bury buffer" :color blue)
        ("q" nil "cancel" :color blue))
   #+END_SRC

*** Projectile

    Project (e.g., Git) management and navigation.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :general
        ("C-c p" '(:keymap projectile-command-map))
        :config
        (projectile-mode))
    #+END_SRC

*** company-mode

    Text completion framework.

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :demand t
        :config
        (add-to-list 'company-backends 'company-elisp)
        (add-to-list 'company-backends 'company-capf)
        (setq company-dabbrev-downcase nil)
        (setq company-idle-delay 0)
        (global-company-mode t)
        :general
        (:keymaps 'company-active-map "RET" 'company-complete))
    #+END_SRC

*** Flycheck

    Syntax checker.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck :config (global-flycheck-mode t))
    #+END_SRC

*** LSP mode

    Install extension that integrates with [[https://langserver.org/][language servers]].

    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :after yasnippet
        :hook
        (python-mode . lsp)
        (java-mode   . lsp)
        (csharp-mode . lsp)
        :commands lsp)

      (use-package lsp-java :after lsp-mode)
    #+END_SRC

    Enable DAP mode. Currently configured for Python and Java.

    #+BEGIN_SRC emacs-lisp
      (use-package dap-mode
        :after lsp-mode
        :config
        (defun enable-dap-mode-and-ui ()
          "Enable dap-mode and dap-ui-mode."
          (dap-mode 1)
          (dap-ui-mode 1))
        (require 'dap-python)
        (require 'dap-java)
        (require 'dap-chrome)
        (require 'dap-node)
        (add-hook 'prog-mode-hook 'enable-dap-mode-and-ui)
        :general
        (:keymaps 'dap-mode-map "C-c d" 'dap-hydra))
    #+END_SRC

*** yasnippet

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet :config (yas-global-mode 1))
    #+END_SRC

*** ripgrep

    Integration with [[https://github.com/BurntSushi/ripgrep][ripgrep]].

    #+BEGIN_SRC emacs-lisp
      (use-package rg :defer t)
    #+END_SRC

*** rainbow-delimiters

    Make corresponding delimiters the same color (e.g., {, (, ")

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
    #+END_SRC

*** doom-modeline

    Modeline from Doom emacs.

    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
        :after all-the-icons
        :hook (after-init . doom-modeline-mode)
        :config
        ;; Don’t compact font caches during GC.
        (setq inhibit-compacting-font-caches t)
        (setq doom-modeline-vcs-max-length 25))
    #+END_SRC

*** exec-path-from-shell

    Inherit environment variables from SHELL.

    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :if (memq window-system '(mac ns))
        :config
        (exec-path-from-shell-initialize))
    #+END_SRC

*** which-key

    Display possible keybindings after an incomplete prefix.

    #+BEGIN_SRC emacs-lisp
      (use-package which-key :config (which-key-mode))
    #+END_SRC

*** ERC

    IRC chat within Emacs.

    #+BEGIN_SRC emacs-lisp
      (require 'erc)
      (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs")))
      (setq erc-autojoin-timing 'ident)
      (setq erc-fill-function 'erc-fill-static)
      (setq erc-fill-static-center 22)
      (setq erc-hide-list '("JOIN" "PART" "QUIT"))
      (setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
      (setq erc-lurker-threshold-time 43200)
      (setq erc-prompt-for-nickserv-password nil)
      (setq erc-server-reconnect-attempts 5)
      (setq erc-server-reconnect-timeout 3)
      (setq erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                                 "324" "329" "332" "333" "353" "477"))
      (add-to-list 'erc-modules 'notifications)
      (add-to-list 'erc-modules 'spelling)
      (erc-services-mode 1)
      (erc-update-modules)
    #+END_SRC

*** eyebrowse

    Window manager.

    #+BEGIN_SRC emacs-lisp
      (use-package eyebrowse
        :demand t
        :after evil
        :general
        (:keymaps 'eyebrowse-mode-map "C-w 1" 'eyebrowse-switch-to-window-config-1)
        (:keymaps 'eyebrowse-mode-map "C-w 2" 'eyebrowse-switch-to-window-config-2)
        (:keymaps 'eyebrowse-mode-map "C-w 3" 'eyebrowse-switch-to-window-config-3)
        (:keymaps 'eyebrowse-mode-map "C-w 4" 'eyebrowse-switch-to-window-config-4)
        :config
        (eyebrowse-mode t)
        (eyebrowse-setup-evil-keys)
        (setq eyebrowse-new-workspace t))
    #+END_SRC

*** Dashboard

    Dashboard shown on startup.

    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :after projectile
        :config
        (setq dashboard-items '((recents   . 5)
                                (bookmarks . 5)
                                (projects  . 5)
                                (agenda    . 5)
                                (registers . 5)))
        (dashboard-setup-startup-hook))
    #+END_SRC

*** goto-line-preview

    Preview line before jumping to it.

    #+BEGIN_SRC emacs-lisp
      (use-package goto-line-preview
        :general
        ("M-g g" 'goto-line-preview))
    #+END_SRC

*** alert

    Alert system.

    #+BEGIN_SRC emacs-lisp
      (use-package alert
        :config
        (when (eq system-type 'darwin)
          (setq alert-default-style 'osx-notifier)))
    #+END_SRC

*** ESUP - Emacs Start Up Profiler

    Emacs startup profiler.

    #+BEGIN_SRC emacs-lisp
      (use-package esup)
    #+END_SRC

*** restclient

    Major mode for debugging REST API calls.

    #+BEGIN_SRC emacs-lisp
      (use-package restclient :mode (("\\.http\\'" . restclient-mode)))
    #+END_SRC

*** Lorem Ipsum

    Insert filler (lorem ipsum) text.

    #+BEGIN_SRC emacs-lisp
      (use-package lorem-ipsum :defer t)
    #+END_SRC

*** EditorConfig

    [[https://editorconfig.org/][EditorConfig]] plugin.

    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
        :config
        (editorconfig-mode 1))
    #+END_SRC

*** persistent-scratch

    Save and backup the \*scratch\* buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package persistent-scratch
        :config
        (setq persistent-scratch-backup-directory (concat user-emacs-directory "scratch"))
        (persistent-scratch-autosave-mode))
    #+END_SRC

*** Treemacs

    Treemacs - a tree layout file explorer for Emacs.

    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
        :demand t
        :config
        (treemacs-git-mode 'simple)
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        :general
        ("C-c t" 'treemacs))

      (use-package treemacs-evil
        :after (treemacs evil))

      (use-package treemacs-projectile
        :after (treemacs projectile))

      (use-package treemacs-icons-dired
        :after (treemacs dired)
        :config (treemacs-icons-dired-mode))

      (use-package treemacs-magit
        :after (treemacs magit))

      (use-package treemacs-all-the-icons
        :after (treemacs all-the-icons))

    #+END_SRC

*** libvterm

    Emacs libvterm integration.

    #+BEGIN_SRC emacs-lisp
      ;; BUG: Even with :if, some packages still try to autoload vterm
      ;; on Windows.
      (when (eq system-type 'gnu/linux)
        (use-package vterm
          :if (eq system-type 'gnu/linux)))
    #+END_SRC

*** Smex

    Enhanced M-x command. Allows =counsel-M-x= to list commands by recently used.

    #+BEGIN_SRC emacs-lisp
      (use-package smex)
    #+END_SRC

*** emacs-tree-sitter

    Integration with [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]].

    #+BEGIN_SRC emacs-lisp
      (use-package tree-sitter)
      (use-package tree-sitter-langs)
    #+END_SRC

*** Emacs IPython Notebook (EIN)

    #+BEGIN_SRC emacs-lisp
      (use-package ein
        :custom
        (ein:output-area-inlined-images t))
    #+END_SRC

*** burnt-toast (notifications on Windows)

    Add support for native notifications on Windows.

    #+BEGIN_SRC emacs-lisp
      (use-package burnt-toast
        :if (eq system-type 'windows-nt)
        :config
        (require 'burnt-toast-alert)
        (setq alert-default-style 'burnt-toast))
    #+END_SRC

** File and language specific modes
*** Org mode extensions

    Use UTF-8 bullet points in org-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets :hook (org-mode . org-bullets-mode))
    #+END_SRC

    HTML export.

    #+BEGIN_SRC emacs-lisp
      (use-package htmlize :defer t)
    #+END_SRC

    Enable better mouse support for org mode.

    #+BEGIN_SRC emacs-lisp
      (require 'org-mouse)
    #+END_SRC

    Flash cards in org mode.

    #+BEGIN_SRC emacs-lisp
      (use-package org-drill :commands org-drill)
    #+END_SRC

    Configure IPython for Org Babel.

    #+BEGIN_SRC emacs-lisp
      (use-package ob-ipython
        :config
        (org-babel-do-load-languages
          'org-babel-load-languages
          '((ipython . t)))
        (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
    #+END_SRC

    GCal integration with org agenda.

    #+BEGIN_SRC emacs-lisp
      (use-package org-gcal
        :if (auth-source-search :host "gcal" :user "scedarbaum")
        :config
        (defconst org-gcal-file "~/Dropbox/org/google/calendar.org")
        (when (file-exists-p org-gcal-file)
          (add-to-list 'org-agenda-files org-gcal-file))
        (setq org-gcal-creds (nth 0 (auth-source-search :host "gcal" :user "scedarbaum"))
              org-gcal-client-id (plist-get org-gcal-creds :client_id)
              org-gcal-client-secret(plist-get org-gcal-creds :client_secret)
              org-gcal-fetch-file-alist `(("scedarbaum@gmail.com" . ,org-gcal-file)))
        :hook
        (org-agenda-mode . org-gcal-sync)
        (org-capture-after-finalize . org-gcal-sync))
    #+END_SRC

    GTasks integration with org files.

    #+BEGIN_SRC emacs-lisp
      (use-package org-gtasks
        :quelpa (org-gtasks :fetcher github :repo "cedarbaum/org-gtasks")
        :ensure nil
        :if (auth-source-search :host "gtasks" :user "scedarbaum")
        :config
        (defconst org-gtasks-directory "~/Dropbox/org/google/")
        (when (file-exists-p org-gtasks-directory)
          (add-to-list 'org-agenda-files org-gtasks-directory))
        (setq org-gtasks-creds (nth 0 (auth-source-search :host "gtasks" :user "scedarbaum")))
        (org-gtasks-register-account :name "scedarbaum@gmail.com"
                                     :directory org-gtasks-directory
                                     :client-id (plist-get org-gtasks-creds :client_id)
                                     :client-secret (plist-get org-gtasks-creds :client_secret)))
    #+END_SRC

    Edit and export Anki notes.

    #+BEGIN_SRC emacs-lisp
      (use-package anki-editor)
    #+END_SRC

    Org based replica of [[https://roamresearch.com/][Roam]].

    #+BEGIN_SRC emacs-lisp
      (use-package org-roam
        :custom
        (org-roam-directory "~/Dropbox/org/")
        (org-roam-tag-sources '(vanilla))
        :general
        (:keymaps 'org-roam-mode-map "C-c n l" 'org-roam)
        (:keymaps 'org-roam-mode-map "C-c n f" 'org-roam-find-file)
        (:keymaps 'org-roam-mode-map "C-c n g" 'org-roam-graph)
        (:keymaps 'org-mode-map "C-c n i" 'org-roam-insert)
        (:keymaps 'org-mode-map "C-c n I" 'org-roam-insert-immediate))

      (use-package org-roam-server
        :config
        (setq org-roam-server-host "127.0.0.1"
              org-roam-server-port 8080
              org-roam-server-authenticate nil
              org-roam-server-export-inline-images t
              org-roam-server-serve-files nil
              org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
              org-roam-server-network-poll t
              org-roam-server-network-arrows nil
              org-roam-server-network-label-truncate t
              org-roam-server-network-label-truncate-length 60
              org-roam-server-network-label-wrap-length 20))
    #+END_SRC

*** Markdown

    A major mode for Markdown (.md) files.

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode :defer t)
    #+END_SRC

*** C#

    Language support for C#.

    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode :defer t)
    #+END_SRC

*** TypeScript

    Simple major mode for TypeScript.

    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode :defer t)
    #+END_SRC

*** LaTeX

    Utility for writing and exporting TeX files.

    #+BEGIN_SRC emacs-lisp
      (use-package tex
        :ensure auctex
        :config
        (setq TeX-parse-self t) ; Enable parse on load.
        (setq TeX-auto-save t)) ; Enable parse on save.
    #+END_SRC

*** ledger

    Integration with [[https://www.ledger-cli.org/][ledger]], a text-based accounting system.

    #+BEGIN_SRC emacs-lisp
      (use-package ledger-mode
        :defer t
        :custom (ledger-clear-whole-transactions t))

      (use-package flycheck-ledger :after ledger-mode)
    #+END_SRC

*** Hugo

    Org-mode integration with [[https://gohugo.io/][Hugo]], a Markdown-based static web-site generator.

    #+BEGIN_SRC emacs-lisp
      (use-package ox-hugo :after ox)
    #+END_SRC

*** JSON

    Mode for editing JSON files.

    #+BEGIN_SRC emacs-lisp
      (use-package json-mode :defer t)
    #+END_SRC

*** Lua

    Mode for editing Lua files.

    #+BEGIN_SRC emacs-lisp
      (use-package lua-mode :defer t)
    #+END_SRC

*** Python

    Always use Python 3.

   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "python3")
   #+END_SRC

** Fun
*** emacs-fireplace

    Fireplace in Emacs.

    #+BEGIN_SRC emacs-lisp
      (use-package fireplace :defer t)
    #+END_SRC

*** wttrin.el

    Display the weather.

    #+BEGIN_SRC emacs-lisp
      (use-package wttrin
        :defer t
        :config
        ;; Patch for https://github.com/bcbcarl/emacs-wttrin/issues/16
        (defun wttrin-fetch-raw-string (query)
          "Get the weather information based on your QUERY."
          (let ((url-user-agent "curl"))
            (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
            (with-current-buffer
                (url-retrieve-synchronously
                 (concat "http://wttr.in/" query)
                 (lambda (status) (switch-to-buffer (current-buffer))))
              (decode-coding-string (buffer-string) 'utf-8))))
        (setq wttrin-default-cities '("Redmond, WA" "Evanston, IL")))
    #+END_SRC

*** XKCD

    View XKCD comics.

    #+BEGIN_SRC emacs-lisp
      (use-package xkcd
        :defer t
        :general
        (:states '(normal visual) :keymaps 'xkcd-mode-map "j" #'xkcd-next)
        (:states '(normal visual) :keymaps 'xkcd-mode-map "k" #'xkcd-prev))
    #+END_SRC

*** Emoji

    Display emoji.

    #+BEGIN_SRC emacs-lisp
      (use-package emojify
        :hook
        (dashboard-mode  . emojify-mode)
        (org-mode        . emojify-mode)
        (org-agenda-mode . emojify-mode))
    #+END_SRC

*** Spotify

    Control Spotify via connect API.

    #+BEGIN_SRC emacs-lisp
      (use-package oauth2)
      (use-package spotify
        :quelpa (spotify.el :fetcher github :repo "danielfm/spotify.el")
        :ensure nil
        :if (auth-source-search :host "spotify" :user "scedarbaum")
        :hydra (hydra-spotify (:hint nil)
                              "
      ^Search^                  ^Control^               ^Manage^
      ^^^^^^^^-----------------------------------------------------------------
      _t_: Track               _SPC_: Play/Pause        _+_: Volume up
      _m_: My Playlists        _n_  : Next Track        _-_: Volume down
      _f_: Featured Playlists  _p_  : Previous Track    _x_: Mute
      _u_: User Playlists      _r_  : Repeat            _d_: Device
      ^^                       _s_  : Shuffle           _q_: Quit
      "
                              ("t" spotify-track-search :exit t)
                              ("m" spotify-my-playlists :exit t)
                              ("f" spotify-featured-playlists :exit t)
                              ("u" spotify-user-playlists :exit t)
                              ("SPC" spotify-toggle-play :exit nil)
                              ("n" spotify-next-track :exit nil)
                              ("p" spotify-previous-track :exit nil)
                              ("r" spotify-toggle-repeat :exit nil)
                              ("s" spotify-toggle-shuffle :exit nil)
                              ("+" spotify-volume-up :exit nil)
                              ("-" spotify-volume-down :exit nil)
                              ("x" spotify-volume-mute-unmute :exit nil)
                              ("d" spotify-select-device :exit nil)
                              ("q" quit-window "quit" :color blue))
        :config
        (setq spotify-creds (nth 0 (auth-source-search :host "spotify" :user "scedarbaum"))
              spotify-oauth2-client-id (plist-get spotify-creds :client_id)
              spotify-oauth2-client-secret (plist-get spotify-creds :client_secret)
              spotify-transport 'connect)
        :general
        ("C-c s" 'hydra-spotify/body))
    #+END_SRC

* Adhoc Elisp functions

  Helper function to reload init file.

  #+BEGIN_SRC emacs-lisp
    (defun reload-init-file ()
      "Reload init.el."
      (interactive)
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))
  #+END_SRC

  Open a file in OS file explorer ([[https://emacs.stackexchange.com/questions/7742/what-is-the-easiest-way-to-open-the-folder-containing-the-current-file-by-the-de][source]]).

  #+BEGIN_SRC emacs-lisp
    (defun browse-file-directory ()
      "Open the current file's directory however the OS would."
      (interactive)
      (if default-directory
          (browse-url-of-file (expand-file-name default-directory))
        (error "No `default-directory' to open")))
  #+END_SRC

  Load ad hoc script files. These are system specific and not checked in. The =load-directory= snippet is from the [[https://www.emacswiki.org/emacs/LoadingLispFiles][EmacsWiki]].

  #+BEGIN_SRC emacs-lisp
     (defun load-directory (dir)
       "Load all elisp files within DIR."
       (let ((load-it (lambda (f)
                        (load-file (concat (file-name-as-directory dir) f)))
                      ))
         (mapc load-it (directory-files dir nil "\\.el$"))))

     (let ((adhoc-dir (concat user-emacs-directory "adhoc")))
       (when (file-directory-p adhoc-dir)
         (load-directory adhoc-dir)))
  #+END_SRC
