#+TITLE: Emacs configuration
#+AUTHOR: Sam Cedarbaum
#+EMAIL: scedarbaum@gmail.com
#+DESCRIPTION: An org-babel based Emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+STARTUP: inlineimages

* About

  #+ATTR_HTML: :style margin-left: auto; margin-right: auto;
  [[file:photos/emacs-logo.png]]

  This is my Emacs configuration! It is largely based around Evil mode.

* Configuration
** General configuration
*** Personal information

    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Sam Cedarbaum"
          user-mail-address "scedarbaum@gmail.com")
    #+END_SRC

*** Startup window

    Disable startup screen.

    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    #+END_SRC

*** GUI configuration

    This section is for themes and GUI configuration. Below code will reload the configuration each time a new frame is created. This is useful when using Emacs server/client.

    #+BEGIN_SRC emacs-lisp
    (defun configure-frame (&optional frame)
      "Customize the FRAME and load theme."
      (use-package snazzy-theme
        :if window-system
        :ensure t
        :config
        (load-theme 'snazzy t))
      (unless frame
        (setq frame (selected-frame)))
      (when frame
        (with-selected-frame frame
          (when (display-graphic-p)
            (menu-bar-mode -1)
            (toggle-scroll-bar -1)
            (tool-bar-mode -1)))))

    ;; Configure frame and also ensure each new frame will be configured
    (configure-frame)
    (add-hook 'after-make-frame-functions #'configure-frame t)
    #+END_SRC

*** Help system

    Select the help window when opened.

    #+BEGIN_SRC emacs-lisp
    (setq help-window-select t)
    #+END_SRC

*** Sounds

    Disable bell function.

    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

*** History

    Don't delete any backups.

    #+BEGIN_SRC emacs-lisp
    (setq delete-old-versions -1)
    #+END_SRC

    Unconditionally make numeric backups for files.

    #+BEGIN_SRC emacs-lisp
    (setq version-control t)
    #+END_SRC

    Backup files even if they're under version control.

    #+BEGIN_SRC emacs-lisp
    (setq vc-make-backup-files t)
    #+END_SRC

    Place automatically saved files in a single directory.

    #+BEGIN_SRC emacs-lisp
    (setq auto-save-file-name-transforms
      '((".*" "~/.emacs.d/auto-save-list/" t)))
    #+END_SRC

    Place all backups in a single directory.

    #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
      '((".*" . "~/.emacs.d/backups")))
    #+END_SRC

    Save the minibuffer history between sessions. Also save the kill-ring and search rings.

    #+BEGIN_SRC emacs-lisp
    (require 'savehist)
    (savehist-mode 1)
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
            '(kill-ring
            search-ring
            regexp-search-ring))
    #+END_SRC

*** Customize

    Put all automatic configurations in a separate file.

    #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file 'noerror)
    #+END_SRC

*** Text encoding

    Prefer [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]] Encoding.

    #+BEGIN_SRC emacs-lisp
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
    #+END_SRC

*** Font

    Use the [[https://sourcefoundry.org/hack/][Hack]] font.

    #+BEGIN_SRC emacs-lisp
    (when (member "Hack" (font-family-list))
      (set-face-attribute 'default nil :font "Hack-11"))
    #+END_SRC

*** Spaces/tabs

    Use spaces instead of tabs.

    #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    #+END_SRC

** OS specific setting
*** macOS

    Bind the command key to meta.

    #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
        (setq mac-command-modifier 'meta))
    #+END_SRC

** Packages
*** General packages
**** Evil mode

     Vim emulation for Emacs ([[https://github.com/emacs-evil/evil][GitHub]]).

     #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode))
     #+END_SRC

     Vim-style key-bindings for Org mode ([[https://github.com/Somelauw/evil-org-mode/blob/master/README.org][GitHub]]).

     #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :ensure t
       :after org
       :config
       (add-hook 'org-mode-hook 'evil-org-mode))
     #+END_SRC

     Vim-style key-bindings for Magit ([[https://github.com/emacs-evil/evil-magit][GitHub]]).

     #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :ensure t)
     #+END_SRC

     Vim-style key-bindings for many common Emacs modes ([[https://github.com/emacs-evil/evil-collection][GitHub]]).

     #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
     #+END_SRC

**** Helm

     Incremental search/narrowing framework.

     #+BEGIN_SRC emacs-lisp
     (use-package helm
       :if window-system
       :ensure t
       :commands (helm-mode helm-autoresize-mode)
       :bind (("M-x"     . helm-M-x)
              ("M-y"     . helm-show-kill-ring)
              ("C-x b"   . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c h o" . helm-occur)
              ("C-h a"   . helm-apropos)
              ("C-c C-g" . helm-grep-do-git-grep-with-prefix-arg))
       :init
       (defun helm-grep-do-git-grep-with-prefix-arg ()
         "Helper function to call helm-grep-do-git-grep with a prefix argument.
       This performs the search on the whole repository."
         (interactive)
         (setq current-prefix-arg '(4)) ; C-u
         (call-interactively 'helm-grep-do-git-grep))
       (require 'helm-config)
       (setq helm-echo-input-in-header-line     t)
       (setq helm-move-to-line-cycle-in-source  t)
       (setq helm-scroll-amount                 8)
       (setq helm-split-window-inside-p         t)
       (setq helm-autoresize-max-height         0)
       (setq helm-autoresize-min-height        30)
       :config
       (helm-mode 1)
       (helm-autoresize-mode 1))
     #+END_SRC

     Find files in a Git repository.

     #+BEGIN_SRC emacs-lisp
     (use-package helm-ls-git
       :ensure t
       :bind (("C-c g" . 'helm-ls-git-ls)))
     #+END_SRC

     Helm integration with [[*Projectile][Projectile]].

     #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t)
     #+END_SRC

**** Magit

     Git integration.

     #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t)
     #+END_SRC

**** Projectile

     Project (e.g., Git) management and navigation.

     #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (projectile-mode +1))
     #+END_SRC

**** company-mode

     Text completion framework.

     #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init (global-company-mode))
     #+END_SRC

**** Flycheck

     Syntax checker.

     #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode))
     #+END_SRC

**** ripgrep

     Integration with [[https://github.com/BurntSushi/ripgrep][ripgrep]].

     #+BEGIN_SRC emacs-lisp
     (use-package rg :ensure t)
     #+END_SRC

**** exec-path-from-shell

     This package ensures that environment variables (e.g., $PATH) are observed by Emacs.

     #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init
       (when (memq window-system '(mac ns x))
         (setq exec-path-from-shell-check-startup-files nil)
         (exec-path-from-shell-initialize)))
     #+END_SRC

**** rainbow-delimiters

     Make corresponding delimiters the same color (e.g., {, (, ")

     #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
     #+END_SRC

*** File and language specific modes
**** Org mode extensions

     Use UTF-8 bullet points in org-mode.

     #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :hook (org-mode . org-bullets-mode))
     #+END_SRC

     HTML export.

     #+BEGIN_SRC emacs-lisp
     (use-package htmlize :ensure t)
     #+END_SRC

**** Markdown

     A major mode for Markdown (.md) files.

     #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :defer t)
     #+END_SRC

**** C#

     Integration with OmniSharp server for .NET development. This package will also install [[https://github.com/josteink/csharp-mode][csharp-mode]] as a dependency.

     #+BEGIN_SRC emacs-lisp
     (use-package omnisharp
       :ensure t
       :after (company flycheck)
       :config
       (add-hook 'csharp-mode-hook 'omnisharp-mode)
       (add-to-list 'company-backends 'company-omnisharp)
       (add-hook 'csharp-mode-hook 'flycheck-mode))
     #+END_SRC

**** TypeScript

     Integration with the TypeScript server for IDE-like capabilities. This package will also install [[https://github.com/emacs-typescript/typescript.el][typescript.el]] as a dependency.

     #+BEGIN_SRC emacs-lisp
     (use-package tide
       :ensure t
       :after (typescript-mode company flycheck)
       :hook ((typescript-mode . tide-setup)
              (typescript-mode . tide-hl-identifier-mode)
              (before-save     . tide-format-before-save)))
     #+END_SRC

**** LaTeX

     Utility for writing and exporting TeX files.

     #+BEGIN_SRC emacs-lisp
     (use-package auctex
       :defer t
       :ensure t
       :config
       (require 'auctex)
       (setq TeX-parse-self t) ; Enable parse on load.
       (setq TeX-auto-save t) ; Enable parse on save.
       (add-to-list 'exec-path "/Library/TeX/texbin/"))
     #+END_SRC

**** ledger

     Integration with [[https://www.ledger-cli.org/][ledger]], a text-based accounting system.

     #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :ensure t
       :mode ("\\.dat\\'"
              "\\.ledger\\'")
       :custom (ledger-clear-whole-transactions t))

     (use-package flycheck-ledger
       :after ledger-mode
       :ensure t)
     #+END_SRC

**** Hugo

     Org-mode integration with [[https://gohugo.io/][Hugo]], a Markdown-based static web-site generator.

     #+BEGIN_SRC emacs-lisp
     (use-package ox-hugo
       :ensure t
       :after ox)
     #+END_SRC
